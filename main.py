
#!/usr/bin/python
# -*- coding: utf-8 -*-
import os, sys

import logging
import flask
import telebot
from telebot import types
from telebot import apihelper
from Checkers import isvalid_phone_number, isvalid_order, isvalid_address, isvalid_count
from models import User, Address, Phone_Number, Black_List, Token_Unblock

API_TOKEN = ""

CHAT_OUTPUT = -4125418031
ADMIN_GROUP_ID = -4192581904
ADMIN_ID = [1333538265, 1006078469, 775207817]

PHONE_NUMBERs_ADMIN = {
    "Julie_tel_number":"0677000472",
    "Roman_tel_number":"0973477073"
}
WEBHOOK_HOST = ''
WEBHOOK_PORT = 8443  # 443, 80, 88 or 8443 (port need to be 'open')
#WEBHOOK_LISTEN = '0.0.0.0'  # In some VPS you may need to put here the IP addr

#WEBHOOK_SSL_CERT = './webhook_cert.pem'  # Path to the ssl certificate
#WEBHOOK_SSL_PRIV = './webhook_pkey.pem'  # Path to the ssl private key
#DOMAIN = '1.2.3.4' # either domain, or ip address of vps


app = flask.Flask(__name__)

WEBHOOK_URL_BASE = "https://%s:%s" % (WEBHOOK_HOST, WEBHOOK_PORT)
WEBHOOK_URL_PATH = "/%s/" % (API_TOKEN)

logger = telebot.logger
telebot.logger.setLevel(logging.INFO)

@app.route("/", methods=['GET', 'HEAD'])
def hello():
    return '<img src="https://i.gifer.com/6oa.gif" alt="">'

@app.route(WEBHOOK_URL_PATH, methods=['POST'])
def webhook():
    if flask.request.headers.get('content-type') == 'application/json':
        json_string = flask.request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        flask.abort(403)


apihelper.ENABLE_MIDDLEWARE = True

bot = telebot.TeleBot(API_TOKEN, threaded=False)
#775207817

@bot.middleware_handler(update_types=['message'])
def modify_message(bot_instance, message):
    if not message.text:
        return stock(message)
    # modifying the message before it reaches any other handler
    user_tg_id = Black_List.select().where(Black_List.user_tg_id == str(message.from_user.id.numerator))
    if user_tg_id:
        if message.chat.id == ADMIN_GROUP_ID or message.chat.id == CHAT_OUTPUT:
            return stock(message)

        bot.clear_step_handler(message)
        msg = message.text.strip()
        if  msg[0:7] == "unblock":
            key = msg.split("\n")
            if  len(key) == 2:
                return unblock(message, key[1].strip())

        bot.delete_message(message.chat.id, message.id)
        bot.send_message(message.chat.id, "–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ", reply_markup=types.ReplyKeyboardRemove())
        bot.send_message(message.chat.id, "–î–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∑–≤'—è–∂–∏—Ç–µ—Å—å –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"\
                                          "\n"+PHONE_NUMBERs_ADMIN.get("Julie_tel_number")+" - –Æ–ª—ñ—è"\
                                          "\n"+PHONE_NUMBERs_ADMIN.get("Roman_tel_number")+" - –†–æ–º–∞–Ω")
        bot.register_next_step_handler(message, stock)

def stock(message):
    pass
def stock_to_fast_reg(message):
    if message.text == None:
        return stock(message)
    msg = message.text.strip()
    if msg == "/start" or msg == "/stock":
        return stock(message)
    bot.register_next_step_handler(message, send_welcome)

def unblock(message, key):
    if key:
        token = Token_Unblock.get(Token_Unblock.token == key)
        if token and token.used == False:
            try:
                record = Black_List.get(Black_List.user_tg_id == str(message.from_user.id.numerator))
                token.used = True
                token.save()
                record.delete_instance()
            except Exception as e:
                print(e)

@bot.message_handler(commands=['bred'])
def test(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã —É —Ç–µ–±—è –≤—Å—ë —Å–ª–æ–∂–∏–ª–æ—Å—å –≤ –∂–∏–∑–Ω–∏, –Ω—É–∂–Ω–æ —Ö–æ—Ä–æ—à–æ —É—á–∏—Ç—å—Å—è")
@bot.message_handler(commands=['send_msg_id'])
def msg_id_all(message):
    bot.send_message(message.chat.id, "your id = " + str(message.from_user.id.numerator))
    bot.send_message(message.chat.id, "id group = "+str(message.chat.id))
@bot.message_handler(commands=['stock'])
def helper_out_msg_branch(message):
    return stock(message)

@bot.message_handler(commands=['start'])
def pin_msg_welcome(message):
    if message == None:
        return stock(message)
    pin_msgID = bot.send_message(message.chat.id,
                                 PHONE_NUMBERs_ADMIN.get("Julie_tel_number")+" - –Æ–ª—ñ—è (–∫–µ—Ä—ñ–≤–Ω–∏–∫)\n" +
                                 PHONE_NUMBERs_ADMIN.get("Roman_tel_number")+' - –†–æ–º–∞–Ω (–¥–æ—Å—Ç–∞–≤–∫–∞)').message_id
    try:
        bot.unpin_all_chat_messages(chat_id=message.chat.id)
    except:
        pass
    bot.pin_chat_message(chat_id=message.chat.id, message_id=pin_msgID)
    bot.register_next_step_handler(message, send_welcome)

def send_welcome(message):
    with open("FirstPictureInfo.jpg", "rb") as file:
        bot.send_photo(message.chat.id, photo=file.read())
    print("User id == "+str(message.from_user.id))
    print("Chat id =="+str(message.chat.id))

    text = "–î–æ—Å—Ç–∞–≤–∫–∞ –≤–æ–¥–∏ –º. –û–¥–µ—Å–∞ \n–ó–≤–∏—á–∞–π–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É—Ç–ª—ñ–≤ 18,9–ª —Ñ–æ—Ä–º—É—î—Ç—å—Å—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å. " \
           "–ú–æ–∂–ª–∏–≤–∞ —Ç–µ—Ä–º—ñ–Ω–æ–≤–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ, –∞–ª–µ –Ω–µ –∑–ª–æ–≤–∂–∏–≤–∞–π—Ç–µ —Ü—ñ—î—é —Ñ—É–Ω–∫—Ü—ñ—î—é, –±—É–¥—å –ª–∞—Å–∫–∞."
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    bcBtn = types.KeyboardButton('üè¢–±—ñ–∑–Ω–µ—Å —Ü–µ–Ω—Ç—Ä')
    cBtn = types.KeyboardButton("‚òï–∫–∞–≤'—è—Ä–Ω—è")
    othersBtn = types.KeyboardButton('–Ü–Ω—à–µ')

    markup.add(bcBtn, cBtn, othersBtn)
    bot.send_message(message.chat.id, text, reply_markup=markup)
    bot.send_message(message.chat.id, "–†–∞–¥—ñ –ø–æ—á–∞—Ç–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é.")
    bot.register_next_step_handler(message, fast_reg)


def fast_reg(message):
    if not User.select().where(User.user_tg_id == str(message.from_user.id.numerator)):
        User.create(
            user_tg_id=str(message.from_user.id.numerator)
        )
    bot.send_message(message.chat.id, "–°–∫–æ–ø—ñ—é–π—Ç–µ —à–∞–±–ª–æ–Ω —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—ó –¥–∞–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞ —Ç–∞ –¥–≤–æ–∫—Ä–∞–ø–∫–æ—é. \n–®–∞–±–ª–æ–Ω")
    context = {}
    if message.text == "‚òï–∫–∞–≤'—è—Ä–Ω—è":
        context.update({"object": "–ö"})
        bot.send_message(message.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω: 0661116699\n–ù–∞–∑–≤–∞: –ê–≤—Ä–æ—Ä–∞\n–í—É–ª–∏—Ü—è: –ê–∫–∞–¥–µ–º—ñ–∫–∞ –ö–æ–º–∞—Ä–æ–≤–∞"
                                          "\n–î—ñ–º: 62–∞\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: 3",
                         reply_markup=types.ReplyKeyboardRemove())


    elif message.text == 'üè¢–±—ñ–∑–Ω–µ—Å —Ü–µ–Ω—Ç—Ä':
        context.update({"object": "–ë–¶"})
        bot.send_message(message.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω: 0661116699\n–ù–∞–∑–≤–∞: –ê–≤—Ä–æ—Ä–∞ \n–í—É–ª–∏—Ü—è: –ê–∫–∞–¥–µ–º—ñ–∫–∞ –ö–æ–º–∞—Ä–æ–≤–∞"
                                          "\n–î—ñ–º: 62–∞ \n‚Ññ–û—Ñ—ñ—Å–∞: 6–Ω\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: 3",
                         reply_markup=types.ReplyKeyboardRemove())

    elif message.text == '–Ü–Ω—à–µ':
        context.update({"object": "other"})
        bot.send_message(message.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω: 0661116699\n–ù–∞–∑–≤–∞: –ê–≤—Ä–æ—Ä–∞ \n–í—É–ª–∏—Ü—è: –ê–∫–∞–¥–µ–º—ñ–∫–∞ –ö–æ–º–∞—Ä–æ–≤–∞"
                                          "\n–î—ñ–º: 62–∞ \n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: 3",
                         reply_markup=types.ReplyKeyboardRemove())

    else:
        bot.reply_to(message, "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        Btn = types.KeyboardButton('–û–∫')
        markup.add(Btn)
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–æ—á–∞—Ç–∫—É", reply_markup=markup)
        return stock_to_fast_reg(message)

    bot.register_next_step_handler(message, test_coplete_order, context)


def test_coplete_order(message, context):
    msg = message.text.strip()


    if not isvalid_order(msg, context.get("object")):
        bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —à–∞–±–ª–æ–Ω—É")
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–æ—á–∞—Ç–∫—É")
        return send_welcome(message)

    #arr here because validation simple and not wonna create record in DB
    arr_values = msg.split("\n")
    if not isvalid_count(str(arr_values[-1].split(":")[1]).strip()):
        bot.reply_to(message, "–ü–æ–º–∏–ª–∫—É —É —á–∏—Å–ª—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ")
        bot.send_message(message.chat.id,
                         "–°–∫–æ–ø—ñ—é–π—Ç–µ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –≤—ñ—Ä–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—É—Ç–ª—ñ–≤\n–í–∞—à–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.send_message(message.chat.id, context.get("full_ticket"))
        return step_invalid_count(message, context)

    context.update({"full_ticket": msg})


    if not isvalid_phone_number(str(arr_values[0].split(":")[1]).strip()):
        bot.reply_to(message, "–ù–æ–º–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ–æ—Ä–º–∞—Ç—É\n0661116699")
        bot.send_message(message.chat.id,
                         "–°–∫–æ–ø—ñ—é–π—Ç–µ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –≤—ñ—Ä–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω–∏–π –Ω–æ–º–µ—Ä\n–í–∞—à–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.send_message(message.chat.id, context.get("full_ticket"))
        return step_invalid_phone_number(message, context)

    context.update({"phone_number":str(arr_values[0].split(":")[1]).strip()})

    sub_name = str(arr_values[1].split(":")[1]).strip()
    sub_street = str(arr_values[2].split(":")[1]).strip()
    sub_house_num = str(arr_values[3].split(":")[1]).strip()

    if not (sub_name and sub_street and sub_house_num):
        bot.reply_to(message, "–í –∑–∞—è–≤—Ü—ñ —î –ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–ª—è")
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–æ—á–∞—Ç–∫—É")
        return send_welcome(message)

    context.update({"name" :sub_name})
    context.update({"street":sub_street} )
    context.update({"house_num" :sub_house_num})

    if context.get("object") == "–ë–¶":
        sub_office_num = str(arr_values[4].split(":")[1]).strip()
        if not sub_office_num:
            bot.reply_to(message, "–í –∑–∞—è–≤—Ü—ñ –ø–æ—Ä–æ–∂–Ω—î –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ –ø–æ–ª–µ ‚Ññ–æ—Ñ–∏—Å—É")
            bot.send_message(message.chat.id,
                             "–°–∫–æ–ø—ñ—é–π—Ç–µ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –≤—ñ—Ä–Ω–∏–π ‚Ññ–æ—Ñ–∏—Å—É\n–í–∞—à–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
                             reply_markup=types.ReplyKeyboardRemove())

            bot.send_message(message.chat.id, context.get("full_ticket"))
            return step_invalid_office_num(message, context)

        context.update({"office_num": sub_office_num})


    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    cBtn = types.KeyboardButton('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É\n(–Ω–∞ –∑–∞–≤—Ç—Ä–∞)')
    chBtn = types.KeyboardButton('–ó–º—ñ–Ω–∏—Ç–∏ –∑–∞—è–≤–∫—É')
    fBtn = types.KeyboardButton('üî•–¢–µ—Ä–º—ñ–Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—èüî•\n(–Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ)')
    rBtn = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É')
    markup.add(cBtn, chBtn, fBtn ,rBtn)

    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=markup)
    bot.register_next_step_handler(message, coplete_order, context)


def coplete_order(message, context):

    msg = message.text.strip()

    if msg == "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É\n(–Ω–∞ –∑–∞–≤—Ç—Ä–∞)" or  msg == "üî•–¢–µ—Ä–º—ñ–Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—èüî•\n(–Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ)":
        user = User.get(User.user_tg_id == str(message.from_user.id.numerator))
        if not Phone_Number.select().where(Phone_Number.phone_number == context.get("phone_number"), Phone_Number.user_id == user):
            Phone_Number.create(
                phone_number=context.get("phone_number"),
                user=user
            )
        Address.create(
            object=context.get("object"),
            name=context.get("name"),
            street=context.get("street"),
            house_num=context.get("house_num"),
            office_num=context.get("office_num"),
            user=user
        )
        message_to_group = "user_tg_id = " + str(message.from_user.id.numerator)+\
                           "\n–ó–∞–∫–∞–∑ \n" + context.get("full_ticket")
        message_user = "–ó–∞–∫–∞–∑ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ"

        if msg == "üî•–¢–µ—Ä–º—ñ–Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—èüî•\n(–Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ)":
            message_to_group += "\nüî•üî•üî•"
            message_user = "–¢–µ—Ä–º—ñ–Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        Btn = types.KeyboardButton('–û–∫')
        markup.add(Btn)

        bot.send_message(message.chat.id, message_user, reply_markup=markup)
        bot.send_message(CHAT_OUTPUT, message_to_group)
        bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—Å")
    elif msg == "–ó–º—ñ–Ω–∏—Ç–∏ –∑–∞—è–≤–∫—É":
        bot.send_message(message.chat.id,
                         "–î–æ–±—Ä–µ, —Å–∫–æ–ø—ñ—é—Ç–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.\n–ü–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        bot.send_message(message.chat.id, context.get("full_ticket"), reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, test_coplete_order, context)

    elif msg == '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        Btn = types.KeyboardButton('–û–∫')
        markup.add(Btn)
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–æ—á–∞—Ç–∫—É", reply_markup=markup)
        return stock_to_fast_reg(message)
    else:
        bot.reply_to(message, "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ")
        return send_welcome(message)

def step_invalid_phone_number(message, context):
    bot.register_next_step_handler(message,test_coplete_order, context)
def step_invalid_count(message, context):
    bot.register_next_step_handler(message, test_coplete_order, context)
def step_invalid_office_num(message, context):
    bot.register_next_step_handler(message, test_coplete_order, context)

@bot.message_handler(content_types=['text'])
def start_order(message):
    if message == None or message.chat.id == CHAT_OUTPUT:
        return stock(message)

    if message.text.strip()=="/admen" and message.chat.id == ADMIN_GROUP_ID:
        return admin_panel(message)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

    start_order = types.KeyboardButton('–°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É')
    markup.add(start_order)
    bot.send_message(message.chat.id, "–ü–æ—á–∞—Ç–æ–∫", reply_markup=markup)
    bot.register_next_step_handler(message, ask_phone_number)

def ask_phone_number(message):

    if message.chat.id == ADMIN_GROUP_ID or message.chat.id == CHAT_OUTPUT or message.text.strip() != '–°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É':
        return stock(message)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

    user = User.select().where(User.user_tg_id == str(message.from_user.id.numerator))
    if not user:
        User.create(
            user_tg_id=str(message.from_user.id.numerator)
        )
    phone_numbers = Phone_Number.select().where(Phone_Number.user == user)

    for number in phone_numbers:
        Btn = types.KeyboardButton(number.phone_number)
        markup.add(Btn)

    crudBtn = types.KeyboardButton('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–î–æ–¥–∞—Ç–∏, –∑–º—ñ–Ω–∏—Ç–∏, –≤–∏–¥–∞–ª–∏—Ç–∏)')
    lBtn = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É')
    markup.add(crudBtn, lBtn)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", reply_markup=markup)
    if not phone_numbers:
        bot.send_message(message.chat.id, "–ü–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä—ñ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")

    bot.register_next_step_handler(message, ask_address)

def ask_address(message):
    msg = message.text.strip()

    if msg == '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–î–æ–¥–∞—Ç–∏, –∑–º—ñ–Ω–∏—Ç–∏, –≤–∏–¥–∞–ª–∏—Ç–∏)':
        return choiseCrudPhoneNumber(message)
    if msg == '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        Btn = types.KeyboardButton('–û–∫')
        markup.add(Btn)
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–æ—á–∞—Ç–∫—É", reply_markup=markup)
        return stock(message)

    if not isvalid_phone_number(msg):
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–æ –≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä")
        return start_order(message)


    field_ticket = {
        "phone_number" : msg,
        "full_address": "",
        "count": ""
    }

    context ={}
    context.update(field_ticket)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

    user = User.get(User.user_tg_id == str(message.from_user.id.numerator))
    addresses = Address.select().where(Address.user == user)

    context.update({"dict_user_addresses":{}})
    for addresse in addresses:
        full_string=''
        if addresse.object =="–ë–¶":
            full_string+= addresse.object +" "+ addresse.name +" ‚Ññ–æ—Ñ. "+addresse.office_num+" –≤—É–ª. "+addresse.street+\
                          " "+addresse.house_num
        elif addresse.object =="–ö":
            full_string += "‚òï" + " " + addresse.name +" –≤—É–ª. " + addresse.street + " " + addresse.house_num
        elif addresse.object =='other' or addresse.object == None:
            full_string += addresse.name + " –≤—É–ª. " + addresse.street + " " + addresse.house_num
        context.get("dict_user_addresses").update({addresse.id: full_string})
        Btn = types.KeyboardButton(full_string)
        markup.add(Btn)

    crudBtn = types.KeyboardButton('–ê–¥—Ä–µ—Å–∞ (–î–æ–¥–∞—Ç–∏, –∑–º—ñ–Ω–∏—Ç–∏, –≤–∏–¥–∞–ª–∏—Ç–∏)')
    markup.add(crudBtn)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –í–∞—à—É –∞–¥—Ä–µ—Å—É –∞–±–æ –¥–æ–¥–∞–π—Ç–µ —ó—ó –¥–æ —Å–≤–æ–≥–æ —Å–ø–∏—Å–∫—É", reply_markup=markup)

    if not addresses:
        bot.send_message(message.chat.id, "–ü–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–∏.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ –∞–¥—Ä–µ—Å—É")

    bot.register_next_step_handler(message, ask_count, context)

def ask_count(message, context):
    if message.text.strip() == None:
        return stock(message)

    msg = message.text.strip()
    if not context.get("full_address"):
        context["full_address"] = message.text.strip()

    if msg=='–ê–¥—Ä–µ—Å–∞ (–î–æ–¥–∞—Ç–∏, –∑–º—ñ–Ω–∏—Ç–∏, –≤–∏–¥–∞–ª–∏—Ç–∏)':
        return choiseCrudAddress(message)

    if context.get("dict_user_addresses"):
        if not msg in context.get("dict_user_addresses").values():
            bot.send_message(message.chat.id, "–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ –∞–¥—Ä–µ—Å—É –∑—ñ —Å–ø–∏—Å–∫—É")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            Btn = types.KeyboardButton('–û–∫')
            markup.add(Btn)
            bot.reply_to(message, "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ", reply_markup=markup)
            return stock(message)

        pk = int(list(context.get("dict_user_addresses").keys())[list(context.get("dict_user_addresses").values()).index(msg)])
        context.update({"pk":pk})

        context.pop('dict_user_addresses')


    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    one = types.KeyboardButton('1')
    two = types.KeyboardButton('2')
    three = types.KeyboardButton('3')
    four = types.KeyboardButton('4')
    five = types.KeyboardButton('5')
    six = types.KeyboardButton('6')
    markup.add(one, two, three, four, five, six)
    bot.send_message(message.chat.id, "–Ø–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å? \n"
                                      "–û–±–µ—Ä—ñ—Ç—å –∞–±–æ –≤–ø–∏—à—ñ—Ç—å —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥,\n"
                                      "10",reply_markup=markup)
    print("last before order context")

    bot.register_next_step_handler(message, check_order, context)


def check_order(message, context):
    msg = message.text.strip()
    if not isvalid_count(msg):
        bot.reply_to(message, "–ù–µ —Å—Ö–æ–∂–µ –Ω–∞ —Ü—ñ–ª–µ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ")
        return ask_count(message, context)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    cBtn = types.KeyboardButton('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É\n(–Ω–∞ –∑–∞–≤—Ç—Ä–∞)')
    chBtn = types.KeyboardButton('–ó–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—É—Ç–ª—ñ–≤')
    fBtn = types.KeyboardButton('üî•–¢–µ—Ä–º—ñ–Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—èüî•\n(–Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ)')
    rBtn = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É')
    markup.add(cBtn, chBtn, fBtn, rBtn)

    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=markup)

    typ=""
    address = Address.get(Address.id == context.get("pk"))
    if address.object == "–ë–¶":
        typ = "–ë–¶"
    elif address.object == "–ö":
        typ = "‚òï"
    elif address.object == "other":
        pass
    text_order = "–ó–∞—è–≤–∫–∞: \n–¢–µ–ª–µ—Ñ–æ–Ω: "+context.get("phone_number")+"\n–ù–∞–∑–≤–∞: "+typ+" "+address.name+\
                 "\n–í—É–ª–∏—Ü—è: "+address.street+"\n–î—ñ–º: "+address.house_num

    if typ == "–ë–¶":
        text_order+= "\n‚Ññ–û—Ñ—ñ—Å–∞: "+address.office_num

    text_order+= "\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: "+msg

    bot.send_message(message.chat.id, text_order, reply_markup=markup)

    context.update({"text":text_order})
    bot.register_next_step_handler(message, complite, context)

def complite(message, context):
    msg = message.text.strip()
    if msg == "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É\n(–Ω–∞ –∑–∞–≤—Ç—Ä–∞)" or msg == "üî•–¢–µ—Ä–º—ñ–Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—èüî•\n(–Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ)":
        message_to_group = "user_tg_id = " + str(message.from_user.id.numerator) + "\n" + context.get("text")
        message_user = "–ó–∞–∫–∞–∑ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ"

        if msg == 'üî•–¢–µ—Ä–º—ñ–Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—èüî•\n(–Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ)':
            message_to_group += "\n üî•üî•üî•"
            message_user = "–¢–µ—Ä–º—ñ–Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ"
        bot.send_message(CHAT_OUTPUT, message_to_group)

        bot.send_message(message.chat.id, message_user)
        bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—Å")
        return start_order(message)
    elif msg == '–ó–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—É—Ç–ª—ñ–≤':
        return ask_count(message, context)
    elif msg == '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        Btn = types.KeyboardButton('–û–∫')
        markup.add(Btn)
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–æ—á–∞—Ç–∫—É", reply_markup=markup)
        return stock(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        Btn = types.KeyboardButton('–û–∫')
        markup.add(Btn)
        bot.reply_to(message, "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ", reply_markup=markup)



#CRUD or CRUDs  all

def choiseCrudPhoneNumber(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    cBtn = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä')
    uBtn = types.KeyboardButton('–ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä')
    dBtn = types.KeyboardButton('–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–º–µ—Ä')
    lBtn = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É')
    markup.add(cBtn, uBtn, dBtn, lBtn)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=markup)
    bot.register_next_step_handler(message, crudPhoneNumber)

def crudPhoneNumber(message):
    msg = message.text.strip()

    if msg == '–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä':
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ. \n–ù–∞–ø—Ä–∏–∫–ª–∞–¥")
        bot.send_message(message.chat.id, "0661116699", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, createPhoneNumber)
    elif msg == '–ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

        user = User.get(User.user_tg_id == str(message.from_user.id.numerator))
        phone_numbers = Phone_Number.select().where(Phone_Number.user == user)

        for number in phone_numbers:
            Btn = types.KeyboardButton(number.phone_number)
            markup.add(Btn)
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–º—ñ–Ω–∏", reply_markup=markup)
        bot.register_next_step_handler(message, updatePhoneNumber)
    elif msg == '–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–º–µ—Ä':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        rBtn = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É')
        markup.add(rBtn)

        user = User.get(User.user_tg_id == str(message.from_user.id.numerator))
        phone_numbers = Phone_Number.select().where(Phone_Number.user == user)


        for number in phone_numbers:
            Btn = types.KeyboardButton(number.phone_number)
            markup.add(Btn)

        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è", reply_markup=markup)
        bot.register_next_step_handler(message, deletePhoneNumber)
    elif msg == '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É':
        return start_order(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        Btn = types.KeyboardButton('–û–∫')
        markup.add(Btn)
        bot.reply_to(message, "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ", reply_markup=markup)

def createPhoneNumber(message):
    msg = message.text.strip()

    if not isvalid_phone_number(msg):
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–æ –≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä")
        return start_order(message)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    Btn = types.KeyboardButton("–û–∫")
    markup.add(Btn)

    user = User.get(User.user_tg_id == str(message.from_user.id.numerator))
    if not Phone_Number.select().where(Phone_Number.user_id == user.id, Phone_Number.phone_number == msg):
        Phone_Number.create(
            phone_number=msg,
            user=user
        )
        bot.send_message(message.chat.id, "–î–æ–¥–∞–≤—Å—è –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–¶–µ–π –Ω–æ–º–µ—Ä –≤–∂–µ —ñ—Å–Ω—É—î —É –í–∞—Å", reply_markup=markup)

def updatePhoneNumber(message):
    choise_num = message.text
    bot.send_message(message.chat.id, "–í–µ–¥—ñ—Ç—å –Ω–∞ —è–∫–∏–π –Ω–æ–º–µ—Ä –í–∏ –∑–º—ñ–Ω—é—î—Ç–µ", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, updatePhoneNumberComplite, choise_num)

def updatePhoneNumberComplite(message, choise_num):
    msg = message.text.strip()
    if not isvalid_phone_number(msg):
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–æ –≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä")
        return start_order(message)

    user = User.get(User.user_tg_id == str(message.from_user.id.numerator))
    phone_number = Phone_Number.get(Phone_Number.user == user).get(Phone_Number.phone_number == choise_num)
    phone_number.phone_number = msg
    phone_number.save()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    Btn = types.KeyboardButton("–û–∫")
    markup.add(Btn)
    bot.send_message(message.chat.id, f"–ù–æ–º–µ—Ä {msg}\n–ó–º—ñ–Ω–µ–Ω–æ ", reply_markup=markup)

def deletePhoneNumber(message):
    msg = message.text
    if msg == '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É':
        return start_order(message)
    user = User.get(User.user_tg_id == str(message.from_user.id.numerator))
    try:
        phone_number = Phone_Number.get(Phone_Number.user == user).get(Phone_Number.phone_number == msg)
        phone_number.delete_instance()
    except:
        pass
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    Btn = types.KeyboardButton("–û–∫")
    markup.add(Btn)
    bot.send_message(message.chat.id, f"–ù–æ–º–µ—Ä {message.text.strip()}\n–í–∏–¥–∞–ª–µ–Ω–æ ", reply_markup=markup)

#CRUD address

def choiseCrudAddress(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    cBtn = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É')
    uBtn = types.KeyboardButton('–ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å—Ç–∏–Ω—É –∞–¥—Ä–µ—Å–∏ (–≤—É–ª–∏—Ü—é, ‚Ññ–±—É–¥–∏–Ω–∫—É —Ç–∞ —ñ–Ω—à–µ)')
    dBtn = types.KeyboardButton('–í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥—Ä–µ—Å—É')
    lBtn = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É')

    markup.add(cBtn, uBtn, dBtn, lBtn)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=markup)
    bot.register_next_step_handler(message, crudAddress)

def crudAddress(message):
    msg = message.text.strip()

    if msg == '–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        bcBtn = types.KeyboardButton('üè¢–±—ñ–∑–Ω–µ—Å —Ü–µ–Ω—Ç—Ä')
        cBtn = types.KeyboardButton("‚òï–∫–∞–≤'—è—Ä–Ω—è")
        othersBtn = types.KeyboardButton('–Ü–Ω—à–µ')

        markup.add(bcBtn, cBtn, othersBtn)
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–±'—î–∫—Ç—É", reply_markup=markup)

        bot.register_next_step_handler(message, createAddress)
    elif msg == '–ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å—Ç–∏–Ω—É –∞–¥—Ä–µ—Å–∏ (–≤—É–ª–∏—Ü—é, ‚Ññ–±—É–¥–∏–Ω–∫—É —Ç–∞ —ñ–Ω—à–µ)':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

        user = User.get(User.user_tg_id == str(message.from_user.id.numerator))
        addresses = Address.select().where(Address.user == user)

        context = {}

        for addresse in addresses:
            full_string = ''
            if addresse.object == "–ë–¶":
                full_string += addresse.object + " " + addresse.name + " ‚Ññ–æ—Ñ. " + addresse.office_num + " –≤—É–ª. " + addresse.street + " " + addresse.house_num
            elif addresse.object == "–ö":
                full_string += "‚òï" + " " + addresse.name + " –≤—É–ª. " + addresse.street + " " + addresse.house_num
            elif addresse.object == 'other':
                full_string += addresse.name + " –≤—É–ª. " + addresse.street + " " + addresse.house_num
            context.update({addresse.id: full_string})
            Btn = types.KeyboardButton(full_string)
            markup.add(Btn)
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–ª—è –∑–∞–º—ñ–Ω–∏ —á–∞—Å—Ç–∏–Ω–∏", reply_markup=markup)
        bot.register_next_step_handler(message, updateAddress, context)
    elif msg == '–í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥—Ä–µ—Å—É':

        user = User.get(User.user_tg_id == str(message.from_user.id.numerator))
        addresses = Address.select().where(Address.user == user)

        context = {}

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        lBtn = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É')
        markup.add(lBtn)
        for addresse in addresses:
            full_string = ''
            if addresse.object == "–ë–¶":
                full_string += addresse.object + " " + addresse.name + " ‚Ññ–æ—Ñ." + addresse.office_num + " –≤—É–ª. " + addresse.street + " " + addresse.house_num
            elif addresse.object == "–ö":
                full_string += "‚òï" + " " + addresse.name + " –≤—É–ª. " + addresse.street + " " + addresse.house_num
            elif addresse.object == 'other':
                full_string += addresse.name + " –≤—É–ª. " + addresse.street + " " + addresse.house_num
            context.update({addresse.id:full_string})
            Btn = types.KeyboardButton(full_string)
            markup.add(Btn)
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∞–¥—Ä–µ—Å—É –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è", reply_markup=markup)
        bot.register_next_step_handler(message, deleteAddress, context)
    elif msg == '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É':

        return start_order(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        Btn = types.KeyboardButton('–û–∫')
        markup.add(Btn)
        bot.reply_to(message, "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ", reply_markup=markup)

def createAddress(message):
    bot.send_message(message.chat.id, "–°–∫–æ–ø—ñ—é–π—Ç–µ —à–∞–±–ª–æ–Ω —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—ó –¥–∞–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞ —Ç–∞ –¥–≤–æ–∫—Ä–∞–ø–∫–æ—é. \n–®–∞–±–ª–æ–Ω")
    context = {}
    if message.text.strip() == "‚òï–∫–∞–≤'—è—Ä–Ω—è":
        context.update({"object": "–ö"})

        bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞: –ê–≤—Ä–æ—Ä–∞\n–í—É–ª–∏—Ü—è: –ê–∫–∞–¥–µ–º—ñ–∫–∞ –ö–æ–º–∞—Ä–æ–≤–∞"
                                          "\n–î—ñ–º: 62–∞",
                         reply_markup=types.ReplyKeyboardRemove())

    elif message.text.strip() == 'üè¢–±—ñ–∑–Ω–µ—Å —Ü–µ–Ω—Ç—Ä':
        context.update({"object": "–ë–¶"})
        bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞: –ê–≤—Ä–æ—Ä–∞ \n–í—É–ª–∏—Ü—è: –ê–∫–∞–¥–µ–º—ñ–∫–∞ –ö–æ–º–∞—Ä–æ–≤–∞"
                                          "\n–î—ñ–º: 62–∞ \n‚Ññ–û—Ñ—ñ—Å–∞: 6–Ω",
                         reply_markup=types.ReplyKeyboardRemove())

    elif message.text.strip() == '–Ü–Ω—à–µ':
        context.update({"object": "other"})
        bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞: –ê–≤—Ä–æ—Ä–∞\n–í—É–ª–∏—Ü—è: –ê–∫–∞–¥–µ–º—ñ–∫–∞ –ö–æ–º–∞—Ä–æ–≤–∞"
                                          "\n–î—ñ–º: 62–∞",
                         reply_markup=types.ReplyKeyboardRemove())

    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        Btn = types.KeyboardButton('–û–∫')
        markup.add(Btn)
        bot.reply_to(message, "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ", reply_markup=markup)
        return choiseCrudAddress(message)

    bot.register_next_step_handler(message, copletecreateAddress, context)

def copletecreateAddress(message, context):
    msg = message.text.strip()

    if not isvalid_address(msg, context.get("object")):
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–æ –≤–µ–¥–µ–Ω–∞ –∞–¥—Ä–µ—Å–∞")
        bot.send_message(message.chat.id, "–°–∫–æ–ø—ñ—é–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—ó –¥–∞–Ω—ñ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏")
        return choiseCrudAddress(message)

    arr_values = msg.split("\n")


    sub_address_name = str(arr_values[0].split(":")[1]).strip()
    sub_address_street = str(arr_values[1].split(":")[1]).strip()
    sub_address_house_num = str(arr_values[2].split(":")[1]).strip()

    if not (sub_address_name and sub_address_street and sub_address_house_num):
        bot.reply_to(message, "–í –∑–∞—è–≤—Ü—ñ —î –ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–ª—è")
        return choiseCrudAddress(message)
    if context.get("object") == "–ë–¶":
        sub_office_num =str(arr_values[3].split(":")[1]).strip()
        if not sub_office_num:
            bot.reply_to(message, "–í –∑–∞—è–≤—Ü—ñ –ø–æ—Ä–æ–∂–Ω—î –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ –ø–æ–ª–µ ‚Ññ–æ—Ñ–∏—Å—É")
            return choiseCrudAddress(message)
        context.update({"office_num": sub_office_num})

    user = User.get(User.user_tg_id == str(message.from_user.id.numerator))
    Address.create(
        object=context.get("object"),
        name=sub_address_name.strip(),
        street=sub_address_street.strip(),
        house_num=sub_address_house_num.strip(),
        office_num=context.get("office_num"),
        user=user
    )
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    rBtn = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É')
    markup.add(rBtn)
    bot.send_message(message.chat.id, "–ê–¥—Ä–µ—Å–∞ –¥–æ–¥–∞–Ω–∞", reply_markup=markup)

def updateAddress(message, context):
    msg = message.text.strip()
    if not msg in context.values():
        bot.send_message(message.chat.id, "–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ –∞–¥—Ä–µ—Å—É –∑—ñ —Å–ø–∏—Å–∫—É")
        return choiseCrudAddress(message)

    user = User.get(User.user_tg_id == str(message.from_user.id.numerator))
    address = Address.get(Address.user == user) \
        .get(Address.id == int(list(context.keys())[list(context.values()).index(msg)]))
    context.update({"pk":address.id})

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    bcBtn = types.KeyboardButton('üè¢–±—ñ–∑–Ω–µ—Å —Ü–µ–Ω—Ç—Ä')
    cBtn = types.KeyboardButton("‚òï–∫–∞–≤'—è—Ä–Ω—è")
    othersBtn = types.KeyboardButton('–Ü–Ω—à–µ')

    markup.add(bcBtn, cBtn, othersBtn)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–±'—î–∫—Ç—É", reply_markup=markup)
    bot.register_next_step_handler(message, stepupdateAddress, context)

def stepupdateAddress(message, context):

    address = Address.get(Address.id == context.get("pk"))

    bot.send_message(message.chat.id, "–°–∫–æ–ø—ñ—é–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ. –û–±–æ–≤'—è–∑–∫–æ–≤–æ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞ —Ç–∞ –¥–≤–æ–∫—Ä–∞–ø–∫–æ—é")
    msg = message.text.strip()
    if msg == "üè¢–±—ñ–∑–Ω–µ—Å —Ü–µ–Ω—Ç—Ä":
        context.update({"object":"–ë–¶"})
        bot.send_message(message.chat.id, f"–ù–∞–∑–≤–∞: {address.name} \n–í—É–ª–∏—Ü—è: {address.street}"
                                          f"\n–î—ñ–º: {address.house_num} \n‚Ññ–û—Ñ—ñ—Å–∞: {address.office_num}",
                     reply_markup=types.ReplyKeyboardRemove())

    elif msg == "‚òï–∫–∞–≤'—è—Ä–Ω—è":
        bot.send_message(message.chat.id, f"–ù–∞–∑–≤–∞: {address.name} \n–í—É–ª–∏—Ü—è: {address.street}"
                                          f"\n–î—ñ–º: {address.house_num}",
                     reply_markup=types.ReplyKeyboardRemove())
        context.update({"object": "–ö"})

    elif msg == "–Ü–Ω—à–µ":
        bot.send_message(message.chat.id, f"–ù–∞–∑–≤–∞: {address.name} \n–í—É–ª–∏—Ü—è: {address.street}"
                                          f"\n–î—ñ–º: {address.house_num}",
                     reply_markup=types.ReplyKeyboardRemove())
        context.update({"object": "other"})
    else:
        bot.reply_to(message, "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ")
        return choiseCrudAddress(message)

    bot.register_next_step_handler(message, compliteupdateAddress, context)

def compliteupdateAddress(message, context):
    msg = message.text.strip()

    if not isvalid_address(msg, context.get("object")):
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–æ –≤–µ–¥–µ–Ω–∞ –∞–¥—Ä–µ—Å–∞")
        return choiseCrudAddress(message)

    address = Address.get(Address.id == context.get("pk"))


    arr_values = msg.split("\n")
    sub_address_name = str(arr_values[0].split(":")[1]).strip()
    sub_address_street = str(arr_values[1].split(":")[1]).strip()
    sub_address_house = str(arr_values[2].split(":")[1]).strip()
    if context.get("object") == "–ë–¶":
        context.update({"office_num": str(arr_values[3].split(":")[1]).strip()})

    address.object=context.get("object")
    address.name=sub_address_name.strip()
    address.street=sub_address_street.strip()
    address.house_num=sub_address_house.strip()
    address.office_num=context.get("office_num")
    address.save()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    Btn = types.KeyboardButton('–ûk')
    markup.add(Btn)
    bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å –∑–º—ñ–Ω–µ–Ω–∏–π", reply_markup=markup)

def deleteAddress(message, context):
    if message.text.strip() == '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É':
        return start_order(message)

    user = User.get(User.user_tg_id == str(message.from_user.id.numerator))
    address = Address.get(Address.user == user)\
        .get(Address.id == int(list(context.keys())[list(context.values()).index(message.text)]))
    address.delete_instance()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    Btn = types.KeyboardButton("–û–∫")
    markup.add(Btn)
    bot.send_message(message.chat.id, f"–ê–¥—Ä–µ—Å–∞ {message.text.strip()}\n–í–∏–¥–∞–ª–µ–Ω–æ ", reply_markup=markup)

#admin
def admin_panel(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    Btn = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ —É Black List')
    Btnt = types.KeyboardButton('–°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∏–π —Ç–æ–∫–µ–Ω')
    markup.add(Btn, Btnt)
    bot.send_message(ADMIN_GROUP_ID, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é', reply_markup=markup)
    bot.register_next_step_handler(message, choise_admin_action)

def choise_admin_action(message):
    msg = message.text.strip()
    if msg == '–î–æ–¥–∞—Ç–∏ —É Black List':
        bot.send_message(ADMIN_GROUP_ID, '–í–≤–µ–¥—ñ—Ç—å telegram id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –π–æ–≥–æ —É Black List.\n–®–∞–±–ª–æ–Ω')
        bot.send_message(ADMIN_GROUP_ID, '/admen 463153156', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, to_ban_acc)

    elif msg == '–°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∏–π —Ç–æ–∫–µ–Ω':
        from get_token import get_unblock_token
        token = get_unblock_token()
        if not Token_Unblock.select().where(Token_Unblock.token == token):
            Token_Unblock.create(token = token)
            bot.send_message(ADMIN_GROUP_ID, "unblock \n"+token)
        else:
            token = get_unblock_token()
            if not Token_Unblock.select().where(Token_Unblock.token == token):
                Token_Unblock.create(token=token)
                bot.send_message(ADMIN_GROUP_ID, "unblock \n" + token)
        bot.send_message(ADMIN_GROUP_ID, "–í–æ—Ç —ç—Ç–æ –∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–¥–∞–π –ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–Ω–∏–∫—É")
        return  stock(message)


def to_ban_acc(message):
    bot.send_message(ADMIN_GROUP_ID, "last step block")
    msg = message.text.strip()
    user_id_to_ban = msg.split(" ")[1].strip()
    if not Black_List.select().where(Black_List.user_tg_id == user_id_to_ban):
        if int(user_id_to_ban) in ADMIN_ID:
            bot.send_message(ADMIN_GROUP_ID, "–≠—Ç–æ —Å–≤–æ–∏")
            return stock(message)
        Black_List.create(user_tg_id = user_id_to_ban)
        bot.send_message(ADMIN_GROUP_ID, user_id_to_ban+"\n–î–æ–¥–∞–Ω —É Black List")


if __name__ == "__main__":
#bot.infinity_polling()
    #bot.remove_webhook()
    # import time
    # time.sleep(0.1)

    # Set webhook
    #bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH,
                   # certificate=open(WEBHOOK_SSL_CERT, 'r'))

    # Start flask server
    app.run()
    # app.run(host=WEBHOOK_LISTEN,
    #         port=WEBHOOK_PORT,
    #         ssl_context=(WEBHOOK_SSL_CERT, WEBHOOK_SSL_PRIV),
    #         debug=True)

